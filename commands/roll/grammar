{
  function makeInteger(o) {
    return parseInt(o.join(""), 10);
  }
  function merge_objects(array){
  	return array.reduce((accum, current) => {return{...accum, ...current}}, {})
  }
}

start = roll

//atithmetique
space= " "+ {return null}
number = nb:[0-9]+ {return {number: makeInteger(nb)}}
word= w:([a-zA-Z]+) {return {word:w.join("")}}


additive
  = left:multiplicative " "* operator:("+"/"-") " "* right:additive { return {[operator]:{left,right}}}
  / multiplicative


multiplicative
  = left:primary " "* operator:("*"/"/") " "* right:multiplicative { return {[operator]:{left, right}}}
  / primary

primary
  = var
  / "(" " "* additive:additive " "* ")" { return additive; }

var = number / word



//dice roll
roll= "!roll" opt:options {return opt}

options = res:(space (relance / bonus / objectif / faces / joueur / cheat))* {return merge_objects(res.map(x => x[1]))}
bonus = ("bonus"/"b") space perks:additive {return {bonus: perks}}
relance = ("relance"/"r") space perk:additive {return {relance: perk}}
objectif = ("objectif"/"o"/"diff"/"d") space nb:additive {return {objectif: nb}}
faces = ("faces"/"f") space nb:additive {return {faces:nb}}
joueur= ("joueur"/"j") space "\"" name:(space? word)* "\"" {return {joueur:name.map(x => x[1]).join(" ")}}

cheat = "stp" {return {cheat:true}}